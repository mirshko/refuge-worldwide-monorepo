# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Artist {
  id: ID!
  name: String
  shows(
    where: ShowWhereInput! = {}
    orderBy: [ShowOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Show!]
  showsCount(where: ShowWhereInput! = {}): Int
}

input ArtistWhereUniqueInput {
  id: ID
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  id: IDFilter
  name: StringFilter
  shows: ShowManyRelationFilter
}

input ShowManyRelationFilter {
  every: ShowWhereInput
  some: ShowWhereInput
  none: ShowWhereInput
}

input ArtistOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ArtistUpdateInput {
  name: String
  shows: ShowRelateToManyForUpdateInput
}

input ShowRelateToManyForUpdateInput {
  disconnect: [ShowWhereUniqueInput!]
  set: [ShowWhereUniqueInput!]
  create: [ShowCreateInput!]
  connect: [ShowWhereUniqueInput!]
}

input ArtistUpdateArgs {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateInput!
}

input ArtistCreateInput {
  name: String
  shows: ShowRelateToManyForCreateInput
}

input ShowRelateToManyForCreateInput {
  create: [ShowCreateInput!]
  connect: [ShowWhereUniqueInput!]
}

type Show {
  id: ID!
  title: String
  status: String
  coverImage: ImageFieldOutput
  content: Show_content_Document
  publishDate: DateTime
  artists(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artistsCount(where: ArtistWhereInput! = {}): Int
  genres(
    where: GenreWhereInput! = {}
    orderBy: [GenreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Genre!]
  genresCount(where: GenreWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Show_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ShowWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ShowWhereInput {
  AND: [ShowWhereInput!]
  OR: [ShowWhereInput!]
  NOT: [ShowWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringFilter
  publishDate: DateTimeFilter
  artists: ArtistManyRelationFilter
  genres: GenreManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ArtistManyRelationFilter {
  every: ArtistWhereInput
  some: ArtistWhereInput
  none: ArtistWhereInput
}

input GenreManyRelationFilter {
  every: GenreWhereInput
  some: GenreWhereInput
  none: GenreWhereInput
}

input ShowOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input ShowUpdateInput {
  title: String
  status: String
  coverImage: ImageFieldInput
  content: JSON
  publishDate: DateTime
  artists: ArtistRelateToManyForUpdateInput
  genres: GenreRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ArtistRelateToManyForUpdateInput {
  disconnect: [ArtistWhereUniqueInput!]
  set: [ArtistWhereUniqueInput!]
  create: [ArtistCreateInput!]
  connect: [ArtistWhereUniqueInput!]
}

input GenreRelateToManyForUpdateInput {
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

input ShowUpdateArgs {
  where: ShowWhereUniqueInput!
  data: ShowUpdateInput!
}

input ShowCreateInput {
  title: String
  status: String
  coverImage: ImageFieldInput
  content: JSON
  publishDate: DateTime
  artists: ArtistRelateToManyForCreateInput
  genres: GenreRelateToManyForCreateInput
}

input ArtistRelateToManyForCreateInput {
  create: [ArtistCreateInput!]
  connect: [ArtistWhereUniqueInput!]
}

input GenreRelateToManyForCreateInput {
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

type Genre {
  id: ID!
  name: String
  shows(
    where: ShowWhereInput! = {}
    orderBy: [ShowOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Show!]
  showsCount(where: ShowWhereInput! = {}): Int
}

input GenreWhereUniqueInput {
  id: ID
  name: String
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  id: IDFilter
  name: StringFilter
  shows: ShowManyRelationFilter
}

input GenreOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input GenreUpdateInput {
  name: String
  shows: ShowRelateToManyForUpdateInput
}

input GenreUpdateArgs {
  where: GenreWhereUniqueInput!
  data: GenreUpdateInput!
}

input GenreCreateInput {
  name: String
  shows: ShowRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createArtist(data: ArtistCreateInput!): Artist
  createArtists(data: [ArtistCreateInput!]!): [Artist]
  updateArtist(where: ArtistWhereUniqueInput!, data: ArtistUpdateInput!): Artist
  updateArtists(data: [ArtistUpdateArgs!]!): [Artist]
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteArtists(where: [ArtistWhereUniqueInput!]!): [Artist]
  createShow(data: ShowCreateInput!): Show
  createShows(data: [ShowCreateInput!]!): [Show]
  updateShow(where: ShowWhereUniqueInput!, data: ShowUpdateInput!): Show
  updateShows(data: [ShowUpdateArgs!]!): [Show]
  deleteShow(where: ShowWhereUniqueInput!): Show
  deleteShows(where: [ShowWhereUniqueInput!]!): [Show]
  createGenre(data: GenreCreateInput!): Genre
  createGenres(data: [GenreCreateInput!]!): [Genre]
  updateGenre(where: GenreWhereUniqueInput!, data: GenreUpdateInput!): Genre
  updateGenres(data: [GenreUpdateArgs!]!): [Genre]
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  deleteGenres(where: [GenreWhereUniqueInput!]!): [Genre]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  artists(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artist(where: ArtistWhereUniqueInput!): Artist
  artistsCount(where: ArtistWhereInput! = {}): Int
  shows(
    where: ShowWhereInput! = {}
    orderBy: [ShowOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Show!]
  show(where: ShowWhereUniqueInput!): Show
  showsCount(where: ShowWhereInput! = {}): Int
  genres(
    where: GenreWhereInput! = {}
    orderBy: [GenreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Genre!]
  genre(where: GenreWhereUniqueInput!): Genre
  genresCount(where: GenreWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
